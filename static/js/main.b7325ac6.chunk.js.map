{"version":3,"sources":["components/tag-factory/tag-factory.tsx","components/tag-item/tag-item.tsx","shared/services/image.service.ts","components/image-holder/image-from-local-file/image-from-local-file.tsx","assets/img/image-not-found.png","components/image-holder/image-not-found/image-not-found.tsx","components/image-holder/image-preview/image-preview.tsx","components/image-holder/image-url-box/image-url-box.tsx","shared/services/tag.service.ts","components/image-holder/load-tags-from-file-action/load-tags-from-file-action.tsx","components/image-holder/reset-image-action/reset-image-action.tsx","components/image-holder/save-to-file-action/save-to-file-action.tsx","components/image-holder/image-holder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TagFactory","coordinates","addTag","onRemove","tagCard","useRef","Card","className","innerRef","style","top","Y","left","X","CardBody","Button","color","type","onClick","placeholder","onKeyPress","event","key","id","shortid","generate","current","offsetLeft","offsetTop","widthPx","clientWidth","heightPx","clientHeight","description","target","value","validateTag","TagItem","tag","updateTag","removeTag","tagRef","useState","setDescription","editMode","setEditMode","width","height","readOnly","onChange","validateTagForUpdate","IMAGES_SUPPORTED_EXTENSIONS","imageService","imageUrl","fileExtension","substr","lastIndexOf","includes","toLowerCase","file","Promise","resolve","reject","onError","error","reader","removeEventListener","FileReader","onerror","onload","onLoad","result","imageDataUrl","readAsDataURL","LoadImageFromLocalFileAction","fileInputRef","onFileLoaded","children","mountInputFile","setMountInputFile","name","display","ref","input","console","log","files","then","catch","alert","finally","click","size","ImageNotFound","coverImageUrlNotFound","src","alt","ImagePreview","isImageUrlNotFound","onImageError","onClickOverImage","ImageUrlBox","urlBox","setFocus","onChangeUrl","onImageTypeNotSupported","useEffect","focus","url","isValidTagsData","tagsData","trim","Array","isArray","tags","tagService","saveToJsonFile","data","filename","serializedJson","JSON","stringify","jsonDataUri","encodeURIComponent","linkElement","document","createElement","setAttribute","loadTagsFromJsonFile","parse","readAsText","LoadTagsFromFileAction","ResetImageAction","resetImage","disabled","SaveToFileAction","format","length","String","Date","getTime","ImageHolder","setTags","hasAddedTag","setHasAddedTag","setImageUrl","isImageUrlError","setIsImageUrlError","focusOnUrlBox","setFocusOnUrlBox","tagCoordinates","setTagCoordinates","handleChangeImageUrl","isImageLoaded","tagId","tagUpdated","foundTag","find","currentTag","tagsUpdated","filter","unmountTagFactory","setUnmountTagFactory","newTag","map","clientX","clientY","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b7325ac6.chunk.js","sourcesContent":["import { FC, useRef } from \"react\";\nimport { MdDeleteForever, MdLocalOffer } from \"react-icons/md\";\nimport shortid from \"shortid\";\nimport { Button, Card, CardBody } from \"reactstrap\";\nimport { TagCoordinates } from \"../../shared/models/tag-coordinates.model\";\nimport { Tag } from \"../../shared/models/tag.model\";\n\nimport \"./tag-factory.scss\";\n\nexport interface ITagFactoryProps {\n  coordinates: TagCoordinates;\n  addTag: (newTag: Tag) => void;\n  onRemove: () => void;\n}\n\nexport const TagFactory: FC<ITagFactoryProps> = ({\n  coordinates,\n  addTag,\n  onRemove,\n}) => {\n  let tagCard = useRef<any>(null);\n\n  const validateTag = (event: KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      addTag({\n        id: shortid.generate(),\n        X: tagCard?.current?.offsetLeft,\n        Y: tagCard?.current?.offsetTop,\n        widthPx: tagCard?.current?.clientWidth + 4,\n        heightPx: tagCard?.current?.clientHeight + 4,\n        description: (event.target as HTMLInputElement).value,\n      });\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <Card\n          className=\"tag-factory\"\n          innerRef={tagCard}\n          style={{\n            top: coordinates.Y + \"px\",\n            left: coordinates.X + \"px\",\n          }}\n        >\n          <CardBody>\n            <Button\n              className=\"remove-tag btn-icon btn-2\"\n              color=\"danger\"\n              type=\"button\"\n              onClick={() => onRemove()}\n            >\n              <MdDeleteForever />\n            </Button>\n            <div className=\"input-group-merge input-group tag-legend\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">\n                  <MdLocalOffer />\n                </span>\n              </div>\n              <input\n                placeholder=\"Legend\"\n                type=\"text\"\n                className=\"form-control\"\n                onKeyPress={(event: unknown) =>\n                  validateTag(event as KeyboardEvent)\n                }\n              />\n            </div>\n          </CardBody>\n        </Card>\n      </div>\n    </>\n  );\n};\n","import { ChangeEvent, FC, useRef, useState } from \"react\";\nimport { MdDeleteForever, MdLocalOffer } from \"react-icons/md\";\nimport { Button, Card, CardBody } from \"reactstrap\";\nimport { Tag } from \"../../shared/models/tag.model\";\n\nimport \"./tag-item.scss\";\n\nexport interface ITagItemProps {\n  tag: Tag;\n  updateTag: (tagId: Tag[\"id\"], tag: Partial<Tag>) => void;\n  removeTag: (tagId: Tag[\"id\"]) => void;\n}\n\nexport const TagItem: FC<ITagItemProps> = ({ tag, updateTag, removeTag }) => {\n  const tagRef = useRef<any>(null);\n\n  const [description, setDescription] = useState<string>(\n    tag?.description || \"\"\n  );\n  const [editMode, setEditMode] = useState<boolean>(false);\n\n  const validateTagForUpdate = (event: KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n        \n      setEditMode(false);\n      updateTag(tag.id, {\n        description,\n        widthPx: tagRef?.current?.clientWidth +4,\n        heightPx: tagRef?.current?.clientHeight +4,\n      });\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <Card\n          innerRef={tagRef}\n          style={{\n            top: tag?.Y + \"px\",\n            left: tag?.X + \"px\",\n            width: tag?.widthPx,\n            height: tag?.heightPx,\n          }}\n        >\n          <CardBody>\n            <Button\n              className=\"remove-tag btn-icon btn-2\"\n              color=\"danger\"\n              type=\"button\"\n              onClick={() => removeTag(tag?.id)}\n            >\n              <MdDeleteForever />\n            </Button>\n            <div className=\"input-group-merge input-group tag-legend\">\n              <div className=\"input-group-prepend\">\n                <span className=\"input-group-text\">\n                  <MdLocalOffer />\n                </span>\n              </div>\n\n              <input\n                value={description}\n                readOnly={!editMode}\n                type=\"text\"\n                className=\"form-control\"\n                onClick={() => setEditMode(true)}\n                onChange={(event: ChangeEvent) =>\n                  setDescription((event.target as HTMLInputElement).value)\n                }\n                onKeyPress={(event: unknown) =>\n                  validateTagForUpdate(event as KeyboardEvent)\n                }\n              />\n            </div>\n          </CardBody>\n        </Card>\n      </div>\n    </>\n  );\n};\n","const IMAGES_SUPPORTED_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif'];\n\nconst isImageExtensionSupported = (imageUrl: string): boolean => {    \n    const fileExtension = imageUrl.substr(imageUrl.lastIndexOf('.')+1);\n    if (! fileExtension){\n        // since the url has no explicit extension and we can't check the real MIME type\n        // let's admit this is a image, unless native image onError raise something\n        return true;\n    }\n    return IMAGES_SUPPORTED_EXTENSIONS.includes(fileExtension?.toLowerCase())\n}\n\nconst loadImageFromLocalFile = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {        \n        function onError(error: any) {\n            reader?.removeEventListener(\"onerror\", onError);\n            reject(error)\n        };\n        function onLoad() {\n            reader?.removeEventListener(\"onload\", onLoad);\n            reader?.removeEventListener(\"onerror\", onError);            \n            if (typeof reader?.result === \"string\"){                \n                const imageDataUrl = reader?.result;\n                resolve(imageDataUrl)                \n            }            \n        }\n        const reader: FileReader = new FileReader();\n        reader.onerror = onError;\n        reader.onload = onLoad;          \n        reader.readAsDataURL(file)\n    });\n}\n\nexport const imageService = {\n    isImageExtensionSupported,\n    loadImageFromLocalFile\n}","import { FC, useState } from \"react\";\nimport { MdDescription } from \"react-icons/md\";\nimport { Button } from \"reactstrap\";\nimport { imageService } from \"../../../shared/services/image.service\";\n\nimport \"./image-from-local-file.scss\";\n\ninterface ILoadImageFromLocalFileProps {\n  onFileLoaded: (imageDataUrl: string) => void;\n}\n\nexport const LoadImageFromLocalFileAction: FC<ILoadImageFromLocalFileProps> = ({\n  onFileLoaded,\n  children,\n}) => {\n  let fileInputRef: any;\n\n  const onClickFacade = () => {\n    fileInputRef.click();\n  };\n\n  const handleFile = () => {\n    console.log(\"fileInputRef.files[0]  \", fileInputRef.files[0]);\n    imageService\n      .loadImageFromLocalFile(fileInputRef.files[0])\n      .then(onFileLoaded)\n      .catch(() => alert(\"Error while loading the image file\"))\n      .finally(() => {\n        // here is a workaround to allow input:file:onChange() event be fired event though the same file is selected again\n        setMountInputFile(true);\n        setMountInputFile(true);\n      });\n  };\n\n  const [mountInputFile, setMountInputFile] = useState<boolean>(true);\n\n  return (\n    <>\n      {mountInputFile === true && (\n        <input\n          type=\"file\"\n          name=\"file-selector\"\n          style={{ display: \"none\" }}\n          ref={(input) => (fileInputRef = input)}\n          onChange={handleFile}\n        />\n      )}\n      <Button\n        className=\"btn-icon btn-3\"\n        color=\"primary\"\n        onClick={onClickFacade}\n      >\n        <MdDescription color=\"white\" size={20} />\n        <span className=\"btn-inner--text\"> {children}</span>\n      </Button>\n    </>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/image-not-found.295cf90a.png\";","import { FC } from \"react\";\nimport imageUrl from \"../../../assets/img/image-not-found.png\";\n//const COVER_IMAGE_NOT_FOUND = \"./../../../assets/img/image-not-found.png\"\n//\"https://www.salonlfc.com/wp-content/uploads/2018/01/image-not-found-scaled-1150x647.png\";\n\ninterface IImageNotFoundProps {\n  coverImageUrlNotFound?: string;\n}\n\nexport const ImageNotFound: FC<IImageNotFoundProps> = ({\n  coverImageUrlNotFound,\n}) => <img src={coverImageUrlNotFound || imageUrl} alt=\"not found\" />;\n","import { FC, SyntheticEvent } from \"react\";\nimport { ImageNotFound } from \"../image-not-found/image-not-found\";\nimport \"./image-preview.scss\"\n\nconst ALT_IMAGE_TO_TAG = \"this pic is the one to be tagged\";\n\ninterface IImagePreviewProps {\n  imageUrl: string;\n  isImageUrlNotFound: boolean;\n  coverImageUrlNotFound?: string;\n  onImageError: (event: SyntheticEvent) => void;\n  onClickOverImage: (event: MouseEvent) => void;\n}\n\nexport const ImagePreview: FC<IImagePreviewProps> = ({\n  imageUrl,\n  isImageUrlNotFound,\n  coverImageUrlNotFound,\n  onImageError,\n  onClickOverImage,\n}) =>\n  isImageUrlNotFound ? (\n    <ImageNotFound coverImageUrlNotFound={coverImageUrlNotFound} />\n  ) : (\n    <img\n      src={imageUrl}\n      alt={ALT_IMAGE_TO_TAG}\n      onError={onImageError}\n      onClick={(event: unknown) => onClickOverImage(event as MouseEvent)}\n    />\n  );\n","import { ChangeEvent, FC, useEffect } from \"react\";\nimport { imageService } from \"../../../shared/services/image.service\";\n\ninterface IImageUrlBoxProps {\n  setFocus: boolean;\n  placeholder?: string;\n  onChangeUrl(url: string): void;\n  onImageTypeNotSupported: () => void;\n}\n\nexport const ImageUrlBox: FC<IImageUrlBoxProps> = ({\n  setFocus,\n  placeholder,\n  onChangeUrl,\n  onImageTypeNotSupported,\n}) => {\n  const handleChangeUrl = (url: string) => {\n    if (imageService.isImageExtensionSupported(url)) {\n      onChangeUrl(url);\n    } else {\n      onImageTypeNotSupported();\n    }\n  };\n\n  let urlBox: HTMLInputElement | null;\n\n  useEffect(() => {\n    setFocus === true && (urlBox as HTMLInputElement).focus();\n  });\n\n  return (\n    <input\n      className=\"form-control\"\n      type=\"search\"\n      size={4}\n      ref={(input) => (urlBox = input)}\n      placeholder={placeholder || \"Paste URL of the image to be tagged\"}\n      onChange={(event: ChangeEvent) =>\n        handleChangeUrl((event.target as HTMLInputElement).value)\n      }\n    />\n  );\n};\n","import { SerializableTagsData } from \"../models/serializable-tag-data.model\";\n\nconst saveToJsonFile = (data: SerializableTagsData, filename: string) => {\n    const serializedJson = JSON.stringify(data, null, 4);\n    const jsonDataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(serializedJson);    \n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', jsonDataUri);\n    linkElement.setAttribute('download', filename || 'image-tags.json');\n    linkElement.click();\n}\n\nconst loadTagsFromJsonFile = (file: File): Promise<SerializableTagsData> => {\n    return new Promise((resolve, reject) => {        \n        function onError(error: any) {\n            reader?.removeEventListener(\"onerror\", onError);\n            reject(error)\n        };\n        function onLoad() {\n            reader?.removeEventListener(\"onload\", onLoad);\n            reader?.removeEventListener(\"onerror\", onError);            \n            if (typeof reader?.result === \"string\"){                \n                const tagsData = JSON.parse(reader?.result || \"{}\");\n                if (isValidTagsData(tagsData)){\n                    resolve(tagsData)\n                }\n                reject('JSON file has a wrong structured content')                \n            }            \n        }\n        const reader: FileReader = new FileReader();\n        reader.onerror = onError;\n        reader.onload = onLoad;          \n        reader.readAsText(file);\n    });\n}\n\nconst isValidTagsData = (tagsData: SerializableTagsData|any) => {\n    return typeof tagsData?.imageUrl === \"string\" && tagsData?.imageUrl.trim() !== \"\" && Array.isArray(tagsData?.tags)\n} \n\nexport const tagService = {\n    saveToJsonFile,\n    loadTagsFromJsonFile\n} ","import { FC, useState } from \"react\";\nimport { MdCloudUpload } from \"react-icons/md\";\nimport { Button } from \"reactstrap\";\nimport { SerializableTagsData } from \"../../../shared/models/serializable-tag-data.model\";\nimport { tagService } from \"../../../shared/services/tag.service\";\n\nimport \"./load-tags-from-file-action.scss\";\n\ninterface ILoadTagsFromFileActionProps {\n  onFileLoaded: (tagsData: SerializableTagsData) => void;\n}\n\nexport const LoadTagsFromFileAction: FC<ILoadTagsFromFileActionProps> = ({\n  onFileLoaded,\n  children,\n}) => {\n  let fileInputRef: any;\n\n  const onClickFacade = () => {\n    fileInputRef.click();\n  };\n\n  const handleFile = () => {\n    tagService\n      .loadTagsFromJsonFile(fileInputRef.files[0])\n      .then(onFileLoaded)\n      .catch(() => alert(\"Error while loading the JSON file\"))\n      .finally(() => {\n        // here is a workaround to allow input:file:onChange() event be fired event though the same file is selected again\n        setMountInputFile(true);\n        setMountInputFile(true);\n      });\n  };\n\n  const [mountInputFile, setMountInputFile] = useState<boolean>(true);\n\n  return (\n    <>\n      {mountInputFile === true && (\n        <input\n          type=\"file\"\n          name=\"file-selector\"\n          id=\"load-json-file-selector\"\n          ref={(input) => (fileInputRef = input)}\n          onChange={handleFile}\n        />\n      )}\n      <Button\n        className=\"btn-icon btn-3\"\n        color=\"primary\"\n        onClick={onClickFacade}\n      >\n        <MdCloudUpload color=\"white\" size={20} />\n        <span className=\"btn-inner--text\"> {children}</span>\n      </Button>\n    </>\n  );\n};\n","import { FC } from \"react\";\nimport { MdCached } from \"react-icons/md\";\nimport { Button } from \"reactstrap\";\nimport \"./reset-image-action.scss\";\n\ninterface IResetImageActionProps {\n  resetImage: () => void;\n  disabled: boolean;\n}\n\nexport const ResetImageAction: FC<IResetImageActionProps> = ({\n  resetImage,\n  disabled,\n  children,\n}) => (\n  <Button\n    className=\"reset-action btn-icon btn-3\"\n    color=\"primary\"\n    onClick={resetImage}\n    disabled={disabled}\n  >\n    <MdCached color=\"white\" size={20} />\n    <span className=\"btn-inner--text\"> {children}</span>\n  </Button>\n);\n","import { FC } from \"react\";\nimport { MdSave } from \"react-icons/md\";\nimport { Button } from \"reactstrap\";\nimport { Tag } from \"../../../shared/models/tag.model\";\nimport { tagService } from \"../../../shared/services/tag.service\";\nimport \"./save-to-file-action.scss\";\n\ninterface ISaveToFileActionProps {\n  format: \"json\";\n  tags: Tag[];\n  imageUrl: string;\n}\n\nexport const SaveToFileAction: FC<ISaveToFileActionProps> = ({\n  format,\n  tags,\n  imageUrl,\n  children,\n}) => (\n  <Button\n    disabled={tags.length === 0}\n    className=\"btn-icon btn-3\"\n    color=\"primary\"\n    onClick={() =>\n      format === \"json\" &&\n      tagService?.saveToJsonFile(\n        { imageUrl, tags },\n        `image-tagger-${String(new Date().getTime())}.json`\n      )\n    }\n  >\n    <MdSave color=\"white\" size={20} />\n    <span className=\"btn-inner--text\"> {children}</span>\n  </Button>\n);\n","import { FC, SyntheticEvent, useState } from \"react\";\nimport shortid from \"shortid\";\nimport { SerializableTagsData } from \"../../shared/models/serializable-tag-data.model\";\nimport { TagCoordinates } from \"../../shared/models/tag-coordinates.model\";\nimport { Tag } from \"../../shared/models/tag.model\";\nimport { TagFactory } from \"../tag-factory/tag-factory\";\nimport { TagItem } from \"../tag-item/tag-item\";\nimport { LoadImageFromLocalFileAction } from \"./image-from-local-file/image-from-local-file\";\nimport \"./image-holder.scss\";\nimport { ImagePreview } from \"./image-preview/image-preview\";\nimport { ImageUrlBox } from \"./image-url-box/image-url-box\";\nimport { LoadTagsFromFileAction } from \"./load-tags-from-file-action/load-tags-from-file-action\";\nimport { ResetImageAction } from \"./reset-image-action/reset-image-action\";\nimport { SaveToFileAction } from \"./save-to-file-action/save-to-file-action\";\n\ninterface IIMageHolderProps {}\n\nexport const ImageHolder: FC<IIMageHolderProps> = () => {\n  const [tags, setTags] = useState<Tag[]>([]);\n  const [hasAddedTag, setHasAddedTag] = useState<boolean>(false);\n\n  const [imageUrl, setImageUrl] = useState<string>(\"\");\n  const [isImageUrlError, setIsImageUrlError] = useState<boolean>(false);\n  const [focusOnUrlBox, setFocusOnUrlBox] = useState<boolean>(true);\n  const [tagCoordinates, setTagCoordinates] = useState<TagCoordinates>({\n    X: 0,\n    Y: 0,\n  });\n\n  const handleChangeImageUrl = (url: string) => {\n    !isImageUrlError && setImageUrl(url);\n    setIsImageUrlError(false);\n    setFocusOnUrlBox(false);\n  };\n\n  const handleImageError = function (error: SyntheticEvent) {\n    if (error?.type === \"error\") {\n      setIsImageUrlError(true);\n    }\n  };\n\n  const isImageLoaded = (): boolean => imageUrl.trim().length > 0;\n\n  const resetImage = (): void => {\n    setTags([]);\n    setIsImageUrlError(false);\n    setImageUrl(\"\");\n    setFocusOnUrlBox(true);\n  };\n\n  const onImageTypeNotSupported = () => {\n    setIsImageUrlError(true);\n  };\n\n  const onClickOverImage = (event: MouseEvent) => {\n    const { clientX: X, clientY: Y } = event;\n    setUnmountTagFactory(false);\n    setTagCoordinates({ X, Y });\n    setHasAddedTag(false);\n\n  };\n\n  const addTag = (newTag: Tag) => {\n    setTags((tags) => [...tags, newTag]);\n    setHasAddedTag(true);\n\n  };\n\n  const updateTag = (tagId: Tag[\"id\"], tagUpdated: Partial<Tag>) => {\n    const foundTag = tags.find((currentTag) => currentTag?.id === tagId);\n    if (foundTag) {\n      const tagsUpdated = [\n        ...tags.filter((currentTag) => currentTag.id !== tagId),\n        {\n          ...foundTag,\n          ...tagUpdated,\n        } as Tag,\n      ];\n      setTags(tagsUpdated);\n    }\n  };\n\n  const removeTag = (tagId: Tag[\"id\"]) => {\n    setTags(tags.filter((currentTag) => currentTag?.id !== tagId));\n  };\n\n  const isTagCoordinatesDefined = (): boolean =>\n    tagCoordinates.X + tagCoordinates.Y > 0;\n\n  const showTagFactory = (): boolean =>\n    isImageLoaded() && isTagCoordinatesDefined() && !hasAddedTag && unmountTagFactory !== true;\n\n  const onLoadTagsFromFile = ({ imageUrl, tags }: SerializableTagsData) => {\n    handleChangeImageUrl(imageUrl);\n    setTags(tags);\n  };\n\n  const [unmountTagFactory, setUnmountTagFactory] = useState<boolean>(false);\n\n  const onLocalImageLoaded = (imageDataUrl: string) => {\n    handleChangeImageUrl(imageDataUrl);\n  };\n\n  return (\n    <>\n      {showTagFactory() && (\n        <TagFactory\n          coordinates={tagCoordinates}\n          addTag={addTag}\n          onRemove={() => setUnmountTagFactory(true)}\n        />\n      )}\n      {tags.length > 0 &&\n        tags.map((tag) => (\n          <TagItem\n            tag={tag}\n            key={shortid.generate()}\n            updateTag={updateTag}\n            removeTag={removeTag}\n          />\n        ))}\n      <div className=\"box\">\n        <div>\n          {!isImageLoaded() ? (\n            <>\n              <ImageUrlBox\n                setFocus={focusOnUrlBox}\n                onChangeUrl={handleChangeImageUrl}\n                onImageTypeNotSupported={onImageTypeNotSupported}\n              />\n              <p>- OR -</p>\n              <LoadImageFromLocalFileAction onFileLoaded={onLocalImageLoaded}>\n                Pick a file on local disk drive\n              </LoadImageFromLocalFileAction>\n            </>\n          ) : (\n            <>\n              <ImagePreview\n                onClickOverImage={onClickOverImage}\n                onImageError={handleImageError}\n                imageUrl={imageUrl}\n                isImageUrlNotFound={isImageUrlError}\n              />\n            </>\n          )}\n        </div>\n      </div>\n      <div className=\"actions\">\n        <ResetImageAction resetImage={resetImage} disabled={!isImageLoaded()}>\n          Change image\n        </ResetImageAction>\n        <SaveToFileAction format=\"json\" tags={tags} imageUrl={imageUrl}>\n          Save to a JSON file\n        </SaveToFileAction>\n        <LoadTagsFromFileAction onFileLoaded={onLoadTagsFromFile}>\n          Load from a JSON file\n        </LoadTagsFromFileAction>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { ImageHolder } from \"./components/image-holder/image-holder\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <ImageHolder />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}